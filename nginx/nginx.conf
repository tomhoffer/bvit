events {}

http {

 # Rate limiting
 # $binary_remote_addr sets rate limiting per IP, tracked in a binary form to save memory
 # 10m = 10 megabytes of memory for mapping IP address traffic
 # rate = actual rate of requests per user
 # TODO try burst
limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

# Caching
# The local disk directory for the cache is set to /cache
# levels sets up a two‑level directory hierarchy under /path/to/cache/
# keys_zone sets up a shared memory zone for storing the cache keys and metadata such as usage timers. Having a copy of the keys in memory enables NGINX to quickly determine if a request is a HIT or a MISS without having to go to disk, greatly speeding up the check. A 1‑MB zone can store data for about 8,000 keys, so the 10‑MB zone configured in the example can store data for about 80,000 keys.
# max_size sets the upper limit of the size of the cache (to 1 gigabyte in this example). It is optional; not specifying a value allows the cache to grow to use all available disk space
# inactive specifies how long an item can remain in the cache without being accessed.
# NGINX first writes files that are destined for the cache to a temporary storage area, and the use_temp_path=off directive instructs NGINX to write them to the same directories where they will be cached. We recommend that you set this parameter to off to avoid unnecessary copying of data between file systems
proxy_cache_path /cache levels=1:2 keys_zone=my_cache:10m max_size=1g
                 inactive=60m use_temp_path=off;

 upstream localhost {
    server web1:5000;
    #server web2:5000;
    #server web3:5000;
 }

 server {
    listen 8081;
    server_name localhost;

    location / {
       # Enable rate limiting
       #limit_req zone=mylimit;

       # Enable caching
       proxy_cache my_cache;
       # Return cached response when server is down (timeout/error/particular status codes)
       proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;


       # Enable load balancing
       proxy_pass http://localhost;

       proxy_set_header X-NginX-Proxy true;
       add_header X-Cache-Status $upstream_cache_status;
    }
  }
}